version: '3.7'

###############################################################################################################
##  The Frontline Mattermost-0.0.1 April 2020                                                                ##
##  REVIEW CONFIGURATION                                                                                     ##
##  A Can't Stop Columbus Project                                                                            ##
##  Note: this file is configured for Swarm Mode                                                             ##
##                                                                                                           ##
## For more details head to https://github.com/ademeglio/the-frontline/wiki/Mattermost-Setup-&-Configuration ##
## `docker stack deploy --with-registry-auth --resolve-image always --prune \                                ##
##  --compose-file=docker-compose-review.yml mattermost`                                                     ##
###############################################################################################################

x-default-opts:
  &default-opts
    logging:
    options:
      max-size: "1m"

services:

  # Reverse Proxy Service (Traefik 2.x)
  proxy:
    <<: *default-opts
    image: traefik:v2.2.0

    # Main configuration set by traefik.yml

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.traefik==true"
    
    restart_policy:
        condition: any
        delay: 2s
    
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.proxy.entrypoints=traefik,web-secured"
      - "traefik.http.routers.proxy.rule=HOST(`${HOST_TRAEFIK}`)"
      - "traefik.http.routers.proxy.service=api@internal"
      - "traefik.http.routers.proxy.tls=true"
      #- "traefik.http.routers.proxy.tls.certresolver=${CERT_RESOLVER_A}"
      - "traefik.http.routers.proxy.tls.certresolver=cfg-staging-resolver"
      - "traefik.http.services.proxy.loadbalancer.server.port=8080"

      ## Authentication Configuration ##
      - "traefik.http.routers.proxy.middlewares=authTraefik"
      - "traefik.http.middlewares.authTraefik.basicauth.users=${PROXY_USERNAME_PASSWORD}"
    
    ports:
    - published: 80     # HTTP port to be redirected to HTTPS
        target: 80
        protocol: tcp
        mode: host
    - published: 443    # HTTPS port
        target: 443
        protocol: tcp
        mode: host
    
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - type: volume
        source: traefik-certs
        target: /certs
      - type: volume
        source: traefik-configs
        target: /etc/traefik
    
    networks:
      - traefik-public
  
  # Use official Mattermost prod-db image
  db:
    image: mattermost/mattermost-prod-db

    environment:
      - POSTGRES_USER=${MM_DB_USER}
      - POSTGRES_PASSWORD=${MM_DB_USER_PASSWORD}
      - POSTGRES_DB=mattermost
      # uncomment the following to enable backup
      #- AWS_ACCESS_KEY_ID=XXXX
      #- AWS_SECRET_ACCESS_KEY=XXXX
      #- WALE_S3_PREFIX=s3://BUCKET_NAME/PATH
      #- AWS_REGION=us-east-1

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.traefik==true"
      
      restart_policy:
        condition: on-failure
        delay: 2s
    
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - type: volume
        source: mattermost-db
       target: /var/lib/postgresql/Database

    networks:
      - mattermost-db
  
  # Mattermost Application. Use official Mattermost prod-app image
  app:
    image: mattermost/mattermost-prod-app:5.21.0

    environment: 
      - DB_HOST=mattermost_db
      # talk to the port within the overlay network
      # without (over) exposing ports
      - DB_PORT_NUMBER=5432
      - MM_USERNAME=${MM_USER}
      - MM_PASSWORD=${MM_USER_PASSWORD}
      - MM_DBNAME=mattermost
      # pass the edition to be used, default is enterprise
      # setting this env var will make the app use the team edition
      - edition=team

    deploy:
      mode: replicated
      replicas: 1

    restart_policy:
      condition: on-failure
      delay: 3s
      
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.app.entrypoints=web-secured"
      - "traefik.http.routers.app.rule=HOST(`${HOST_MATTERMOST}`)"
      - "traefik.http.routers.app.tls=true"
      #- "traefik.http.routers.app.tls.certresolver=${CERT_RESOLVER_B}"
      - "traefik.http.routers.app.tls.certresolver=cfg-staging-resolver"
      - "traefik.http.services.app.loadbalancer.server.port=80"
      - "traefik.http.services.app.loadbalancer.sticky=true"
    
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - type: volume
        source: mattermost-data
        target: /mattermost/:rw
    
    networks:
      - traefik-public
      - mattermost-db

###############################################################################################################
##  System                                                                                                   ##
###############################################################################################################

networks:
  # External public network
  traefik-public:
    external: true
    name: traefik-public
  # Internal network APP <> Database
  mattermost-db:
    external: true
    name: mattermost-db

volumes: 
    traefik-certs:
      external: true
    traefik-configs:
      external: true
    mattermost-db:
      external: true